/* -*-c++-*- VirtualPlanetBuilder - Copyright (C) 1998-2007 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

#ifndef FILESYSTEM_H
#define FILESYSTEM_H 1

#include <osgDB/FileUtils>

#include <vpb/Export>

namespace vpb
{

class VPB_EXPORT FileSystem : public osg::Referenced
{
    public:
    
        static osg::ref_ptr<FileSystem>& instance();
    
        osgDB::FilePathList& getSourcePaths() { return _sourcePaths; }
        std::string& getDestinationDirectory() { return _destinationDirectory; }
        std::string& getIntermediateDirectory() { return _intermediateDirectory; }
        std::string& getLogDirectory() { return _logDirectory; }
        std::string& getTaskDirectory() { return _taskDirectory; }
        std::string& getMachineFileName() { return _machineFileName; }
    
        void readEnvironmentVariables();

    protected:
    
        FileSystem();
        virtual ~FileSystem();
        
        osgDB::FilePathList _sourcePaths;
        std::string         _destinationDirectory;
        std::string         _intermediateDirectory;
        std::string         _logDirectory;
        std::string         _taskDirectory;
        std::string         _machineFileName;
};

extern VPB_EXPORT osgDB::FilePathList& getSourcePaths();
extern VPB_EXPORT std::string& getDestinationDirectory();
extern VPB_EXPORT std::string& getIntermediateDirectory();
extern VPB_EXPORT std::string& getLogDirectory();
extern VPB_EXPORT std::string& getTaskDirectory();
extern VPB_EXPORT std::string& getMachineFileName();

}

#endif
