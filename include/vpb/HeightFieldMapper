/* -*-c++-*- VirtualPlanetBuilder - Copyright (C) 1998-2007 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

#ifndef VPB_HEIGHTFIELDMAPPER_H_
#define VPB_HEIGHTFIELDMAPPER_H_ 1


#include <osg/NodeVisitor>
#include <osg/ref_ptr>



namespace osg
{
    class HeightField;
    class Geometry;
}

namespace vpb
{

/// HeightFieldMapper class do a mapping of a geometry on a HeightField.
/// geometry have to be in the Xmin-Xmax and Ymin Ymax of the HeightField to woke fine.
class HeightFieldMapper
{
    public:
        
        /// in PER_GEOMETRY mode, HeightFieldMapper detect the edgebound loop,
        ///  compute the centroid of this polygon and map this point on the height
        ///  then adjust the z vaule of all vertex
        ///
        /// in PER_VERTEX mode, all vertex are mapped on the HeightField
        enum Mode
        {
            PER_GEOMETRY,
            PER_VERTEX            
        };
        
        // ** CTOR/DTOR
        HeightFieldMapper(osg::HeightField & hf);
        virtual ~HeightFieldMapper();
                
        // ** map the geometry on heightfield
        void map(osg::Geometry & geometry) const;        
        
        // ** compute z value of HeightField for x y coordinates 
        double getZfromXY(double x, double y) const;
                
    protected:
        
        void getCentroid(osg::Geometry & geometry);
        
        
    private:
        
        Mode _mappingMode;
        
        osg::HeightField & _hf;
};


class HeightFieldMapperVisitor : public osg::NodeVisitor
{
    public:
        
        HeightFieldMapperVisitor(HeightFieldMapper & hfm) : _hfm(hfm) {}
        
        virtual void apply(osg::Geode& node);
        
    private:
        
        HeightFieldMapper & _hfm;
};

} // end vpb namespace

#endif // ** VPB_HEIGHTFIELDMAPPER_H_ ** //
