/* -*-c++-*- VirtualPlanetBuilder - Copyright (C) 1998-2007 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

#ifndef BUILDLOG_H
#define BUILDLOG_H 1

#include <osg/Object>
#include <osg/Notify>

#include <OpenThreads/Mutex>

#include <vpb/Export>

#include <list>


namespace vpb
{

class BuildOperation;

class VPB_EXPORT OperationLog : public osg::Object
{
    public:
    
        OperationLog():
            Object(true)
        {
        }

        OperationLog(const std::string& name):
            Object(true)
        {
            setName(name);
        }
        
        OperationLog(const OperationLog& log, const osg::CopyOp& copyop = osg::CopyOp::SHALLOW_COPY);

        META_Object(vpb, OperationLog)

        std::ostream& operator() (osg::NotifySeverity level=osg::NOTICE);

    protected:
    
        virtual ~OperationLog() {}

};

class VPB_EXPORT BuildLog : public osg::Object
{
    public:
    
        BuildLog();

        BuildLog(const BuildLog& bl, const osg::CopyOp& copyop = osg::CopyOp::SHALLOW_COPY);
        
        META_Object(vpb, BuildLog)

        void pendingOperation(BuildOperation* operation);
        void runningOperation(BuildOperation* operation);
        void completedOperation(BuildOperation* operation);

    protected:
    
        virtual ~BuildLog() {}

        typedef std::list< osg::ref_ptr<OperationLog> > OperationLogs;

        OpenThreads::Mutex  _pendingOperationsMutex;
        OperationLogs       _pendingOperations;

        OpenThreads::Mutex  _runningOperationsMutex;
        OperationLogs       _runningOperations;

        OpenThreads::Mutex  _completedOperationsMutex;
        OperationLogs       _completedOperations;
};

}

#endif
