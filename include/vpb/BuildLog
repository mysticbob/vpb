/* -*-c++-*- VirtualPlanetBuilder - Copyright (C) 1998-2007 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

#ifndef BUILDLOG_H
#define BUILDLOG_H 1

#include <osg/Object>
#include <osg/Notify>
#include <osg/Timer>

#include <OpenThreads/Mutex>

#include <vpb/Export>

#include <list>
#include <sstream>


namespace vpb
{

class BuildOperation;
class BuildLog;

class VPB_EXPORT OperationLog : public osg::Object
{
    public:
    
        OperationLog(BuildLog* buildLog=0);

        OperationLog(BuildLog* buildLog, const std::string& name);
        
        OperationLog(const OperationLog& log, const osg::CopyOp& copyop = osg::CopyOp::SHALLOW_COPY);

        META_Object(vpb, OperationLog)

        std::ostream& operator() (osg::NotifySeverity level=osg::NOTICE);
        
        void setStartPendingTime(double t) { _startPendingTime = t; }
        double getStartPendingTime() const { return _startPendingTime; }
        
        void setStartRunningTime(double t) { _startRunningTime = t; }
        double getStartRunningTime() const { return _startRunningTime; }
        
        void setEndRunningTime(double t) { _endRunningTime = t; }
        double getEndRunningTime() const { return _endRunningTime; }
        
        double getWaitingTime() const { return _startRunningTime - _startPendingTime; }
        double getRunningTime() const { return _endRunningTime - _startRunningTime; }
        
        void report(std::ostream& out);
        
    protected:
    
        virtual ~OperationLog();
        
        double _startPendingTime;
        double _startRunningTime;
        double _endRunningTime;
        
        BuildLog* _buildLog;
        
        
        typedef std::pair<double, std::ostringstream* > MessagePair;
        typedef std::list<MessagePair> Messages;
        Messages _messages;

};

class VPB_EXPORT BuildLog : public osg::Object
{
    public:
    
        BuildLog();

        BuildLog(const BuildLog& bl, const osg::CopyOp& copyop = osg::CopyOp::SHALLOW_COPY);
        
        META_Object(vpb, BuildLog)

        /** Signal that a operation has be constructed and is awaited execution.*/
        void pendingOperation(BuildOperation* operation);
        
        /** Signal that a operation has started execution.*/
        void runningOperation(BuildOperation* operation);
        
        /** Signal that a operation has be completed running.*/
        void completedOperation(BuildOperation* operation);


        /** Initialize the build logs timer.*/
        void initStartTime();
        
        /** Get the current time.*/
        double getCurrentTime() const { return _timer.time_s(); }
        

        /** Report if all outstanding operations have been completed. */
        bool isComplete() const;

        /** Waiting for all outstanding operations to be completed. */
        void waitForCompletion() const;


        /** Generate report. */
        void report(std::ostream& out);

    protected:
    
        virtual ~BuildLog() {}

        typedef std::list< osg::ref_ptr<OperationLog> > OperationLogs;

        osg::Timer          _timer;

        mutable OpenThreads::Mutex  _pendingOperationsMutex;
        OperationLogs       _pendingOperations;

        mutable OpenThreads::Mutex  _runningOperationsMutex;
        OperationLogs       _runningOperations;

        mutable OpenThreads::Mutex  _completedOperationsMutex;
        OperationLogs       _completedOperations;
        
        void remove(OperationLogs& logs, OperationLog* log);
};

}

#endif
